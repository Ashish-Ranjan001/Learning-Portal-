import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CourseService } from '../services/course.service';

interface Course {
  course_id: number;
  course_name: string;
  imagepath: string;
  status: boolean;
}

@Component({
  selector: 'app-view-course',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './view-course.component.html',
  styleUrls: ['./view-course.component.css']
})
export class ViewCourseComponent implements OnInit {
  courses: Course[] = [];
  searchTerm: string = '';
  filteredCourses: Course[] = [];
  paginatedCourses: Course[] = [];
  isLoading: boolean = true;
  error: string | null = null;

  currentPage: number = 1;
  itemsPerPage: number = 3;
  totalPages: number = 1;
  pages: number[] = [];

  constructor(private courseService: CourseService) {}

  ngOnInit(): void {
    this.loadCourses();
  }

  loadCourses(): void {
    this.isLoading = true;
    this.courseService.viewCourses().subscribe({
      next: (response: any) => {
        // Handle the API response - assuming it returns an array of courses
        this.courses = Array.isArray(response) ? response : [response];
        this.isLoading = false;
        this.filterCourses();
      },
      error: (err) => {
        console.error('Error loading courses:', err);
        this.error = 'Failed to load courses. Please try again later.';
        this.isLoading = false;
      }
    });
  }

  search(): void {
    this.currentPage = 1; // Reset page
    this.filterCourses();
  }

  filterCourses(): void {
    if (!this.searchTerm.trim()) {
      this.filteredCourses = [...this.courses];
    } else {
      const term = this.searchTerm.toLowerCase().trim();
      this.filteredCourses = this.courses.filter(course => 
        course.course_name.toLowerCase().includes(term)
      );
    }

    this.calculateTotalPages();
    this.updatePagination();
  }

  calculateTotalPages(): void {
    this.totalPages = Math.ceil(this.filteredCourses.length / this.itemsPerPage);
    this.generatePageArray();
  }

  generatePageArray(): void {
    this.pages = Array.from({ length: this.totalPages }, (_, i) => i + 1);
  }

  updatePagination(): void {
    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    this.paginatedCourses = this.filteredCourses.slice(startIndex, startIndex + this.itemsPerPage);
  }

  goToPage(page: number): void {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.updatePagination();
    }
  }

  goToFirstPage(): void {
    this.goToPage(1);
  }

  goToLastPage(): void {
    this.goToPage(this.totalPages);
  }

  goToPreviousPage(): void {
    this.goToPage(this.currentPage - 1);
  }

  goToNextPage(): void {
    this.goToPage(this.currentPage + 1);
  }

  editCourse(course: Course): void {
    console.log('Edit course:', course);
    // Implement navigation to edit page or open edit modal
  }

  getStatusText(status: boolean): string {
    return status ? 'Published' : 'Unpublished';
  }
}


-------------------------------------------------------------------------------------------------
<div class="container-fluid">
  <!-- Loading indicator -->
  <div *ngIf="isLoading" class="text-center my-5">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-2">Loading courses...</p>
  </div>
  <!-- Error message -->
  <div *ngIf="error" class="alert alert-danger my-3" role="alert">
    {{ error }}
    <button type="button" class="btn btn-link" (click)="loadCourses()">Try Again</button>
  </div>
  <!-- Content when loaded -->
  <div *ngIf="!isLoading && !error">
    <div class="row mb-3 justify-content-between align-items-center">
      <div class="col-md-4">
        <h2>All Courses</h2>
      </div>
      <div class="col-md-4 text-end">
        <div class="input-group">
          <span class="input-group-text">Search:</span>
          <input 
            type="text" 
            class="form-control"
            [(ngModel)]="searchTerm" 
            (input)="search()" 
            placeholder="Search courses...">
        </div>
      </div>
    </div>
<!-- No courses message -->
<div *ngIf="filteredCourses.length === 0" class="alert alert-info">
  No courses found. Please try another search term or add new courses.
</div>

<!-- Courses table -->
<div *ngIf="filteredCourses.length > 0" class="table-responsive">
  <table class="table table-bordered">
    <thead class="table-light">
      <tr>
        <th class="image-column">Image</th>
        <th>Name</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let course of paginatedCourses">
        <td class="image-column">
          <div class="course-image-container">
            <img [src]="course.imagepath" alt="{{ course.course_name }}" class="course-image"
              onerror="this.src='assets/images/placeholder.png'">
          </div>
        </td>
        <td>{{ course.course_name }}</td>
        <td>
          <div class="status-indicator">
            <span class="status-dot" [ngClass]="{'active': course.status}"></span>
            <span>{{ getStatusText(course.status) }}</span>
          </div>
        </td>
        <td class="actions-column">
          <button class="btn btn-sm btn-outline-primary me-2" (click)="editCourse(course)">
            <i class="bi bi-pencil-square"></i> Edit
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<!-- Pagination -->
<div *ngIf="totalPages > 1" class="row">
  <div class="col-12">
    <nav aria-label="Course pagination">
      <ul class="pagination justify-content-center">
        <li class="page-item" [class.disabled]="currentPage === 1">
          <a class="page-link" href="javascript:void(0)" (click)="goToFirstPage()">&laquo;</a>
        </li>
        <li class="page-item" [class.disabled]="currentPage === 1">
          <a class="page-link" href="javascript:void(0)" (click)="goToPreviousPage()">&lsaquo;</a>
        </li>
        
        <li class="page-item" *ngFor="let page of pages" [class.active]="page === currentPage">
          <a class="page-link" href="javascript:void(0)" (click)="goToPage(page)">{{ page }}</a>
        </li>
        
        <li class="page-item" [class.disabled]="currentPage === totalPages">
          <a class="page-link" href="javascript:void(0)" (click)="goToNextPage()">&rsaquo;</a>
        </li>
        <li class="page-item" [class.disabled]="currentPage === totalPages">
          <a class="page-link" href="javascript:void(0)" (click)="goToLastPage()">&raquo;</a>
        </li>
      </ul>
    </nav>
  </div>
</div>
  </div>
</div>
